HR = read.csv("C:\workspace\R\data_sample\HR_comma_sep")
HR = read.csv("C:\\workspace\\R\\data_sample\\HR_comma_sep")
HR = read.csv("C:\\workspace\\R\\data_sample\\HR_comma_sep\\HR_comma_sep.csv")
HR
head(HR)
str(HR)
summary(HR)
summary(HR$left)
HR$Work_accident = as.factor(HR$Work_accident)
HR$left = as.factor(HR$left)
HR$promotion_last_5years = as.factor(HR$promotion_last_5years)
summary(HR)
str(HR)
HR$satisfaction_level_group_1 = ifelse(HR$satisfaction_level > 0.5, 'High', 'Low')
str(HR)
HR$satisfaction_level_group_2 =
ifelse(HR$satisfaction_level > 0.5, 'High',
ifelse(HR$satisfaction_level > 0.5, 'Mid', 'Low')
)
str(HR)
HR_High = subset(HR, salary = 'high')
HR_High
HR_High = subset(HR, salary == 'high')
HR_High_IT = subset(HR, salary == 'high' & department == 'IT')
str(HR_High)
str(HR_High_IT)
HR_High_IT2 = subset(HR, salary == 'high' | department == 'IT')
str(HR_High_IT)
str(HR_High_IT2)
install.packages('plyr')
library(plyr)
SS = ddply(HR,
c("department", "salary"), summarise,
M_SF = mean(satisfaction_level),
COUNT = length(department),
M_WH = rount(mena(average_monthly_hours),2)
)
SS = ddply(HR,
c("department", "salary"), summarise,
M_SF = mean(satisfaction_level),
COUNT = length(department),
M_WH = round(mena(average_monthly_hours),2)
)
SS = ddply(HR,
c("department", "salary"), summarise,
M_SF = mean(satisfaction_level),
COUNT = length(department),
M_WH = round(mean(average_monthly_hours),2)
)
SS = ddply(HR,
c("department", "salary"), summarise,
M_SF = mean(satisfaction_level),
COUNT = length(department),
M_WH = round(mean(average_montly_hours),2)
)
SS
str(SS)
str(SS)
head(SS)
# GGplot을 활용하여, 그래프 그리기
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
# GGplot을 활용하여, 그래프 그리기
library(ggplot2)
ggplot(HR,
aes(x=salary)) + geom_bar()
ggplot(HR,
aes(x=salary)) + geom_bar(aes(fill = left))
ggplot(HR,
aes(x=salary)) + geom_bar(aes(fill = 'royalblue'))
ggplot(HR,
aes(x=salary)) + geom_bar(fill = 'royalblue')
ggplot(HR,
aes(x=salary)) + geom_bar(fill = 'blue')
ggplot(HR,
aes(x=salary)) + geom_bar(fill = 'red')
ggplot(HR,
aes(x=salary)) + geom_bar(fill = 'royalblue')
ggplot(HR,
aes(x=salary)) + geom_bar(aes(fill = 'left'))
ggplot(HR,
aes(x=salary)) + geom_bar(aes(fill = left))
ggplot(HR,
aes(x=salary)) +
geom_bar(aes(fill = department)) +
labs(fill = "Divided by department")
str(HR)
ggplot(HR,
aes(x=salary)) +
geom_bar(aes(fill = department))
ggplot(HR,
aes(x=salary))
ggplot(HR,
aes(x=salary))
ggplot(HR,
aes(x=salary))
+ geom_bar(aes(fill = department))
+ labs(fill = "Divided by department")
+ xlab("salary") + ylab("")
ggplot(HR,
aes(x=salary))
ggplot(HR,
aes(x=salary)) + geom_bar(aes(fill = department))
ggplot(HR, aes(x=salary)) + geom_bar(aes(fill = left))
ggplot(HR, aes(x=salary)) + geom_bar(aes(fill = left))
ggplot(HR, aes(x=salary)) + geom_bar(aes(fill = left))
+ labs(fill = "Divided by left") + xlab("salary") + ylab("")
ggplot(HR, aes(x=salary)) + geom_bar(aes(fill = left)) + labs(fill = "Divided by left") + xlab("salary") + ylab("")
ggplot(HR, aes(x=salary)) +
geom_bar(aes(fill = left)) +
labs(fill = "Divided by left") +
xlab("salary") + ylab("")
# 2. 히스토그램
ggplot(HR, aes(x = satisfaction_level)) +
geom_histogram()
# 2. 히스토그램
ggplot(HR, aes(x = satisfaction_level)) +
geom_histogram(binwidth = 0.01, col='red', fill='royalblue')
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density()
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='rotalblur', binwidth = 0.1)
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='rotalblur')
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='royalblur')
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='royalblue')
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='royalblue', binwidth = 0.02)
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='royalblue', data = left)
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='royalblue', data = left)
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='royalblue')
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='royalblue') +
ylab = ""
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill='royalblue') +
ylab ("")
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(col= 'red', fill=left) +
ylab ("")
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(fill = left) +
ylab ("")
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(fill = department) +
ylab ("")
# 3. 밀도그래프
ggplot(HR, aes(x = satisfaction_level)) +
geom_density(fill = 'blue') +
ylab ("")
str(HR$Work_accident)
str(HR$left)
str(HR$promotion_last_5years)
한글 = str(HR$promotion_last_5years)
print(한글)
한글
한글 = "한글"
한글
#4.박스플롯
ggplot(HR, aes(x = left, y = satisfaction_level)) +
geom_boxplot(aes(fill = left)) +
xlab("이직여부") + ylab("만족도") + ggtitle("BOX PLOT") + labs(fill = "이직여부")
#4.박스플롯
ggplot(HR, aes(x = left, y = satisfaction_level)) +
geom_boxplot(aes(fill = salary), alpha = I(0.4), outlier.colour = 'red') +
xlab("이직여부") + ylab("만족도") + ggtitle("BOX PLOT") + labs(fill = "이직여부")
HR$satisfaction_level = sort(HR$satisfaction_level)
#4.박스플롯
ggplot(HR, aes(x = left, y = satisfaction_level)) +
geom_boxplot(aes(fill = salary), alpha = I(0.4), outlier.colour = 'red') +
xlab("이직여부") + ylab("만족도") + ggtitle("BOX PLOT") + labs(fill = "이직여부")
HR$satisfaction_level = sort(HR$satisfaction_level, decreasing = true)
HR$satisfaction_level = sort(HR$satisfaction_level, decreasing = TRUE)
#4.박스플롯
ggplot(HR, aes(x = left, y = satisfaction_level)) +
geom_boxplot(aes(fill = salary), alpha = I(0.4), outlier.colour = 'red') +
xlab("이직여부") + ylab("만족도") + ggtitle("BOX PLOT") + labs(fill = "이직여부")
HR$left = sort(HR$left, decreasing = TRUE)
#4.박스플롯
ggplot(HR, aes(x = left, y = satisfaction_level)) +
geom_boxplot(aes(fill = salary), alpha = I(0.4), outlier.colour = 'red') +
xlab("이직여부") + ylab("만족도") + ggtitle("BOX PLOT") + labs(fill = "이직여부")
HR$left = sort(HR$left, decreasing = FALSE)
#4.박스플롯
ggplot(HR, aes(x = left, y = satisfaction_level)) +
geom_boxplot(aes(fill = salary), alpha = I(0.4), outlier.colour = 'red') +
xlab("이직여부") + ylab("만족도") + ggtitle("BOX PLOT") + labs(fill = "이직여부")
data_set
data_set$x = sort(dataset$x)
data_set$x = sort(data_set$x)
data_set
data_set$x = sort(data_set$x, decreasing = TRUE)
data_set
# 6. 산점도
ggplot(HR, aes(x = average_monthly_hours, y = satisfaction_level)) +
geom_point()
str(HR)
# 6. 산점도
ggplot(HR, aes(x = average_montly_hours, y = satisfaction_level)) +
geom_point()
# 6. 산점도
ggplot(HR, aes(x = average_montly_hours, y = satisfaction_level)) +
geom_point(aes(col = left))
HR = read.csv("C:\\workspace\\R\\data_sample\\HR_comma_sep\\HR_comma_sep.csv")
HR$Work_accident = as.factor(HR$Work_accident)
HR$left = as.factor(HR$left)
HR$promotion_last_5years = as.factor(HR$promotion_last_5years)
# 6. 산점도
ggplot(HR, aes(x = average_montly_hours, y = satisfaction_level)) +
geom_point(aes(col = left))
summary(HR$salary)
summary(HR$satisfaction_level)
quantile(HR$satisfaction_level, probs = c(0.1, 0.3, 0.6, 0.9))
imDB = read.csv("IMDB-Movie-Data.csv")
imDB = read.csv("C:\\workspace\\R\\data_sample\\IMDB_movie_data")
imDB = read.csv("C:\\workspace\\R\\data_sample\\IMDB_movie_data\\IMDB-Movie-Data.csv")
str(imDB)
variable.names(imDB)
summary(imDB)
# 결측치의 확인
is.na(imDB$Metascore)
sum(is.na(imDB$Metascore))
sum(is.na(imDB))
colSums(is.na(imDB))
# 결측치의 삭제
imDB2 = na.omit(imDB)
colSums(is.na(imDB2))
# 특정 변수에 결측치가 존재하는 경우에만 삭제
imDB3 = imDB[complete.cases(imDB[ , 12]), ]
colSums(is.na(imDB3))
# 결측치가 true이면 58.99입력
imDB$Metascore2 = imDB$Metascore
imDB$Metascore2 = imDB[is.na(imDB$Metascore2)] = 58.99
imDB$Metascore2 = imDB$Metascore
imDB$Metascore2 = imDB[is.na(imDB$Metascore2)] = 58.99
imDB$Metascore2 [is.na(imDB$Metascore2)] = 58.99
# 결측치를 생략하고 계산
mean(imDB$Revenue..Millions.)
# 결측치를 생략하고 계산
mean(imDB$Revenue..Millions., na.rm = TRUE)
print('somethig')
x <- seq(-3, 3, length = 2000)
plot( x, dnorm(x, mean = 0, sd = 1), type = 'l')
x <- seq(-3, 3, length = 20)
plot(x, dnorm(x, mean = 0, sd = 1), type = 'l')
x <- seq(-3, 3, length = 20)
x <- seq(-3, 20, length = 20)
plot(x, dnorm(x, mean = 0, sd = 1), type = 'l')
x <- seq(-3, 3, length = 20)
plot(x, dnorm(x, mean = 0, sd = 1), type = 'l')
plot(x, pnorm(x, mean = 0, sd = 1), type = 'l')
x <- seq(-3, 3, length = 2000)
plot(x, pnorm(x, mean = 0, sd = 1), type = 'l')
plot(x, dnorm(x, mean = 0, sd = 1), type = 'l')
plot(x, pnorm(x, mean = 0, sd = 1), type = 'l')
x <- seq(-3, 3, length = 2000)
plot(x, dnorm(x, mean = 0, sd = 1), type = 'l')
plot(x, pnorm(x, mean = 0, sd = 1), type = 'l')
pnorm(q=c(1), mean=0, sd=1)
plot(x, pnorm(q=c(1), mean=0, sd=1), type = 'l')
plot(c(1), pnorm(q=c(1), mean=0, sd=1), type = 'l')
pnorm(q=c(-1), mean=0, sd=1)
pnorm(q=c(1), mean=0, sd=1) - pnorm(q=c(-1), mean=0, sd=1)
# 누적지수분포
pexp(q = 11, rate =1)
# 누적지수분포그래프
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
stat_function(fun=pexp, args=list(rate=1), colour="brown", size=1.5) +
ggtitle("Cumulative Exponential Distribution")
library(ggplot2)
# 누적지수분포그래프
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
stat_function(fun=pexp, args=list(rate=1), colour="brown", size=1.5) +
ggtitle("Cumulative Exponential Distribution")
pexp(q=2, rate = 1, lower.tail = T)
# 지수분포 그래프
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
stat_function(fun=dexp, args=list(rate=1), colour="brown", size=1.5) +
ggtitle("Exponential Distribution")
pexp(q = 2, rate = 1, lower.tail = T)
qexp(p=0.8646647, rate = 1, lower.tail = T)
# 지수분포의 난수발생
rexp(100, rate = 1)
hist(rexp(100, rate = 1), breaks = 10)
# X가 모수, 람다가 1인 지수분포를 따른다고 했을때, X:1,2,3... 10의 확률밀도함수값을
# 계산한 것이다.
# log=T 옵션을 취한 것과 log(dexp)라는 수식을 입려해서 계산한 값이 동일하다.
dexp <- dexp(c(1:10), rate = 1)
dexp_log <- dexp(c(1:10), rate = 1, log=T)
exp_df = data.frame(cbind(c(1:10), dexp, dexp_log))
exp_df
exp_df <- transform(exp_df, dexp_logarithm = log(dexp))
exp_df
my_par = par(no.readonly = T)
my_par
par(oma = c(0, 0, 1, 0))
par(mflow = c(1,2))
par(mfrow = c(1,2))
plot(dexp)
plot(dexp_log)
mtext("density function of exponential distributin : log = FALSE vs. log = TRUE",
outer = TRUE, cex = 1.2)
# 정규 분포와 T 분포를 겹쳐서 그려보자
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=dnorm, colour="blue", size=1) +
stat_function(fun=dt, args=list(df=3), colour="red", size=2) +
stat_function(fun=dt, args=list(df=1), colour="yellow", size=3) +
annotate("segment", x=1.5, xend=2, y=0.4, yend=0.4, colour="blue", size=1) +
annotate("segment", x=1.5, xend=2, y=0.37, yend=0.37, colour="red", size=2) +
annotate("segment", x=1.5, xend=2, y=0.34, yend=0.34, colour="yellow", size=3) +
annotate("text", x=2.4, y=0.4, label="N(0,1)") +
annotate("text", x=2.4, y=0.37, label="t(3)") +
annotate("text", x=2.4, y=0.34, label="t(1)") +
ggtitle("Normal Distribution, t-distribution")
# t분포 누적분포함수(pt(q, df, lower.tail = T/F))
pt(q = 1, df = 1, lower.tail = T)
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=pt, args=list(df=1), colour="brown", size=1.5) +
ggtitle("Cumulative t-Distribution : t(1)")
pt(q = 1, df = 10, lower.tail = T)
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=pt, args=list(df=2), colour="brown", size=1.5) +
ggtitle("Cumulative t-Distribution : t(1)")
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=pt, args=list(df=200), colour="brown", size=1.5) +
ggtitle("Cumulative t-Distribution : t(1)")
ggplot(data.frame(x=c(-3,3)), aes(x=x)) +
stat_function(fun=pt, args=list(df=200), colour="brown", size=1.5) +
ggtitle("Cumulative t-Distribution : t(1)")
pt(q = 2, df = 1, lower.tail = T)
# t분포 분위수함수(qt(p, df, lower.tail = T/F))
qt(p=0.75, df = 1, lower.tail = T)
# t분포 난수 발생
rt <- rt(200, df=1)
hist(rt)
# t분포 난수 발생
rt <- rt(200, df=1)
hist(rt)
# t분포 난수 발생
rt <- rt(200, df=1)
hist(rt)
hist(rt, breaks = 20)
# t분포 난수 발생
rt <- rt(200, df=1)
hist(rt, breaks = 20)
# t분포 난수 발생
rt <- rt(50, df=1)
hist(rt, breaks = 20)
## 차트 바꾸기
my_par = par(no.readonly = T)
par(oma = c(0, 0, 1, 0))
par(mfrow = c(1))
plot(x, dnorm(x, mean = 0, sd = 1), type = 'l')
plot(x, pnorm(x, mean = 0, sd = 1), type = 'l')
par(mfrow = c(1,3))
plot(x, dnorm(x, mean = 0, sd = 1), type = 'l')
plot(x, pnorm(x, mean = 0, sd = 1), type = 'l')
plot(x, pnorm(x, mean = 0, sd = 1), type = 'l')
par(mfrow = c(1,2))
plot(x, dnorm(x, mean = 0, sd = 1), type = 'l')
plot(x, pnorm(x, mean = 0, sd = 1), type = 'l')
# 5. F분포
# 표본분포를 나타낼 때 t-분포, F-분포, 카이제곱 분포 등을 사용하는데요,
# F-분포는 F-검정 (F-test)과 두 집단 이상의 분산이 같은지 여부를 비교하는
# 분산분석(ANOVA, Analysis of Variance)에 사용되며,
# (카이제곱 분포처럼) 분산을 제곱한 값만을 사용하므로 양(+)의 값만을 가지고 되고,
# 왼쪽으로 치우치고 오른쪽으로 꼬리가 긴 비대칭형 형태를 띠고 있습니다.
# (카이제곱 분포와 모양이 유사함)
df(df1 = 5, df2 = 10)
# 5. F분포
# 표본분포를 나타낼 때 t-분포, F-분포, 카이제곱 분포 등을 사용하는데요,
# F-분포는 F-검정 (F-test)과 두 집단 이상의 분산이 같은지 여부를 비교하는
# 분산분석(ANOVA, Analysis of Variance)에 사용되며,
# (카이제곱 분포처럼) 분산을 제곱한 값만을 사용하므로 양(+)의 값만을 가지고 되고,
# 왼쪽으로 치우치고 오른쪽으로 꼬리가 긴 비대칭형 형태를 띠고 있습니다.
# (카이제곱 분포와 모양이 유사함)
df(x = c(0,5), df1 = 5, df2 = 10)
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=df, args=list(df1=5, df2=10), colour="blue", size=1) +
stat_function(fun=df, args=list(df1=10, df2=30), colour="red", size=2) +
stat_function(fun=df, args=list(df1=50, df2=100), colour="yellow", size=3) +
annotate("segment", x=3, xend=3.5, y=1.4, yend=1.4, colour="blue", size=1) +
annotate("segment", x=3, xend=3.5, y=1.2, yend=1.2, colour="red", size=2) +
annotate("segment", x=3, xend=3.5, y=1.0, yend=1.0, colour="yellow", size=3) +
annotate("text", x=4.3, y=1.4, label="F(df1=5, df2=10)") +
annotate("text", x=4.3, y=1.2, label="F(df1=10, df2=30)") +
annotate("text", x=4.3, y=1.0, label="F(df1=50, df2=100)") +
ggtitle("F Distribution")
x = c(0,5)
x
# f누적 확률 그래프
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
+   stat_function(fun=pf, args=list(df1=5, df2=10), colour="blue", size=1) +
+   ggtitle("Cumulative F-distribution : F(df1=5, df2=10)")
# f누적 확률 그래프
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=pf, args=list(df1=5, df2=10), colour="blue", size=1) +
ggtitle("Cumulative F-distribution : F(df1=5, df2=10)")
# f누적확률값 계산
pf(q = 2, df1 = 5, df2 = 10, lower.tail = T)
qf(p = 0.835805, df1 = 5, df2 = 10, lower.tail = T)
#f분포 난수 발생
rf <- rf(100, df1 = 5, df2 = 10)
hist(rf)
hist(rf, breaks = 20)
hist(x = rf, breaks = 20)
#f분포 난수 발생
rf <- rf(100, df1 = 5, df2 = 10)
hist(x = rf, breaks = 20)
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
stat_function(fun=dchisq, args=list(df=1), colour="black", size=1.2) +
geom_text(x=0.6, y=1, label="df=1") +
stat_function(fun=dchisq, args=list(df=2), colour="blue", size=1.2) +
geom_text(x=0, y=0.55, label="df=2") +
stat_function(fun=dchisq, args=list(df=3), colour="red", size=1.2) +
geom_text(x=0.5, y=0.05, label="df=3") +
ggtitle("Chisq-Distribution")
#누적 카이제곱분포 그래프
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
stat_function(fun=pchisq, args=list(df=1), colour="black", size=1.2) +
geom_text(x=2.5, y=0.93, label="df=1") +
stat_function(fun=pchisq, args=list(df=2), colour="blue", size=1.2) +
geom_text(x=2.5, y=0.77, label="df=2") +
stat_function(fun=pchisq, args=list(df=3), colour="red", size=1.2) +
geom_text(x=2.5, y=0.45, label="df=3") +
ggtitle("Cumulative Chisq-Distribution")
#누적 카이제곱분포 확률 값 계산
pchisq(q = 2.5, df = 1, lower.tail = T)
pchisq(q = 2.5, df = 2, lower.tail = T)
pchisq(q = 2.5, df = 3, lower.tail = T)
# 카이제곱 분포 분위수 계산
qchisq(p=0.8861537, df = 1, lower.tail = T)
qchisq(p=0.7134952, df = 1, lower.tail = T)
qchisq(p=0.5247089, df = 1, lower.tail = T)
# 카이제곱 분포 분위수 계산
qchisq(p=0.8861537, df = 1, lower.tail = T)
qchisq(p=0.7134952, df = 2, lower.tail = T)
qchisq(p=0.5247089, df = 3, lower.tail = T)
#카이제곱분포의 난수발생
rchisq <- rchisq(n=100, df=2)
hist(rchisq, breaks = 2)
hist(rchisq, breaks = 20)
# 범주형 데이터에 대한 분할표와 카이제곱 검정
# 신약 테스트 결과 불러오기
library(gmodels)
install.packages("gmodels")
install.packages("vcd")
library(gmodels)
library(vcd)
str(Arthritis)
attach(Arthritis)
CrossTable(Treatment, Improved,
expected = T,
chisq = T)
detach(Arthritis)
3) 유의수준 (significance level) : n개의 확률표본을 추출하여 신뢰구간을 구하는 잡업을 N번 반복하여 얻은 N개의 신뢰구간 중 미지의 모수 μ 가 포함되어 있지 않을 확률 (α)
# Normal distribution plot
x <- seq(0, 20, length = 100)
plot(x, dnorm(x = x, mean = 10, sd = 3), type = 'l')
x
abline(v = mu, col = "red", lty = 2)
alpha <- 0.05 # significant level
N <- 100 # number of simulation frequency
n <- 20 # sampling number
mu <- 10 # mean of population
sigma <- 3 # SD of population
abline(v = mu, col = "red", lty = 2)
plot(x, dnorm(x = x, mean = mu, sd = 3), type = 'l')
abline(v = mu, col = "red", lty = 2)
abline(v = mu+1.96*3, col = "red", lty = 2)
abline(v = mu-1.96*3, col = "red", lty = 2)
plot(x, dnorm(x = x, mean = mu, sd = 3), type = 'l')
abline(v = mu, col = "red", lty = 2)
abline(v = mu+1.96*3, col = "red", lty = 2)
abline(v = mu-1.96*3, col = "red", lty = 2)
x1 <- c(33:93)
plot(x1, dnorm(x1, mean=63, sd=8) type = 'l',)
plot(x1, dnorm(x1, mean=63, sd=8) type = 'l')
x1 <- c(33:93)
plot(x1, dnorm(x1, mean=63, sd=8) type = 'l')
plot(x1, dnorm(x1, mean=63, sd=8), type = 'l')
abline(v=63, col ="blue", lty = 3)
abline(v=63 + 1.96*8, col ="red", lty = 3)
# x : random sample of 15 students's weight in high scool
x <- c(70.2, 54.9, 67.0, 60.5, 63.4, 61.9, 71.8, 66.1, 72.6, 73.0, 68.7, 70.3, 66.2, 55.6, 65.9)
mean(x)
var(x)
sd(x)
stem(x)
t.test(x, alternative = c("greater"), mu=63, conf.level = 0.95)
# 양측검정
t.test(x, alternative = c("two.sided"), mu=63, conf.level = 0.95)
